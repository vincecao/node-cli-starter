/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as Parent2RouteImport } from './routes/parent2/route'
import { Route as IndexImport } from './routes/index'
import { Route as Parent2IndexImport } from './routes/parent2/index'
import { Route as TestTestImport } from './routes/test.test'
import { Route as Parent2Children2Import } from './routes/parent2/children2'
import { Route as Parent2Children1Import } from './routes/parent2/children1'
import { Route as Parent1ChildrenImport } from './routes/parent1/children'
import { Route as GroupItem2Import } from './routes/_group.item2'
import { Route as GroupItem1Import } from './routes/_group.item1'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const Parent2RouteRoute = Parent2RouteImport.update({
  id: '/parent2',
  path: '/parent2',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const Parent2IndexRoute = Parent2IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => Parent2RouteRoute,
} as any)

const TestTestRoute = TestTestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => TestRoute,
} as any)

const Parent2Children2Route = Parent2Children2Import.update({
  id: '/children2',
  path: '/children2',
  getParentRoute: () => Parent2RouteRoute,
} as any)

const Parent2Children1Route = Parent2Children1Import.update({
  id: '/children1',
  path: '/children1',
  getParentRoute: () => Parent2RouteRoute,
} as any)

const Parent1ChildrenRoute = Parent1ChildrenImport.update({
  id: '/parent1/children',
  path: '/parent1/children',
  getParentRoute: () => rootRoute,
} as any)

const GroupItem2Route = GroupItem2Import.update({
  id: '/_group/item2',
  path: '/item2',
  getParentRoute: () => rootRoute,
} as any)

const GroupItem1Route = GroupItem1Import.update({
  id: '/_group/item1',
  path: '/item1',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/parent2': {
      id: '/parent2'
      path: '/parent2'
      fullPath: '/parent2'
      preLoaderRoute: typeof Parent2RouteImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/_group/item1': {
      id: '/_group/item1'
      path: '/item1'
      fullPath: '/item1'
      preLoaderRoute: typeof GroupItem1Import
      parentRoute: typeof rootRoute
    }
    '/_group/item2': {
      id: '/_group/item2'
      path: '/item2'
      fullPath: '/item2'
      preLoaderRoute: typeof GroupItem2Import
      parentRoute: typeof rootRoute
    }
    '/parent1/children': {
      id: '/parent1/children'
      path: '/parent1/children'
      fullPath: '/parent1/children'
      preLoaderRoute: typeof Parent1ChildrenImport
      parentRoute: typeof rootRoute
    }
    '/parent2/children1': {
      id: '/parent2/children1'
      path: '/children1'
      fullPath: '/parent2/children1'
      preLoaderRoute: typeof Parent2Children1Import
      parentRoute: typeof Parent2RouteImport
    }
    '/parent2/children2': {
      id: '/parent2/children2'
      path: '/children2'
      fullPath: '/parent2/children2'
      preLoaderRoute: typeof Parent2Children2Import
      parentRoute: typeof Parent2RouteImport
    }
    '/test/test': {
      id: '/test/test'
      path: '/test'
      fullPath: '/test/test'
      preLoaderRoute: typeof TestTestImport
      parentRoute: typeof TestImport
    }
    '/parent2/': {
      id: '/parent2/'
      path: '/'
      fullPath: '/parent2/'
      preLoaderRoute: typeof Parent2IndexImport
      parentRoute: typeof Parent2RouteImport
    }
  }
}

// Create and export the route tree

interface Parent2RouteRouteChildren {
  Parent2Children1Route: typeof Parent2Children1Route
  Parent2Children2Route: typeof Parent2Children2Route
  Parent2IndexRoute: typeof Parent2IndexRoute
}

const Parent2RouteRouteChildren: Parent2RouteRouteChildren = {
  Parent2Children1Route: Parent2Children1Route,
  Parent2Children2Route: Parent2Children2Route,
  Parent2IndexRoute: Parent2IndexRoute,
}

const Parent2RouteRouteWithChildren = Parent2RouteRoute._addFileChildren(
  Parent2RouteRouteChildren,
)

interface TestRouteChildren {
  TestTestRoute: typeof TestTestRoute
}

const TestRouteChildren: TestRouteChildren = {
  TestTestRoute: TestTestRoute,
}

const TestRouteWithChildren = TestRoute._addFileChildren(TestRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/parent2': typeof Parent2RouteRouteWithChildren
  '/test': typeof TestRouteWithChildren
  '/item1': typeof GroupItem1Route
  '/item2': typeof GroupItem2Route
  '/parent1/children': typeof Parent1ChildrenRoute
  '/parent2/children1': typeof Parent2Children1Route
  '/parent2/children2': typeof Parent2Children2Route
  '/test/test': typeof TestTestRoute
  '/parent2/': typeof Parent2IndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/test': typeof TestRouteWithChildren
  '/item1': typeof GroupItem1Route
  '/item2': typeof GroupItem2Route
  '/parent1/children': typeof Parent1ChildrenRoute
  '/parent2/children1': typeof Parent2Children1Route
  '/parent2/children2': typeof Parent2Children2Route
  '/test/test': typeof TestTestRoute
  '/parent2': typeof Parent2IndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/parent2': typeof Parent2RouteRouteWithChildren
  '/test': typeof TestRouteWithChildren
  '/_group/item1': typeof GroupItem1Route
  '/_group/item2': typeof GroupItem2Route
  '/parent1/children': typeof Parent1ChildrenRoute
  '/parent2/children1': typeof Parent2Children1Route
  '/parent2/children2': typeof Parent2Children2Route
  '/test/test': typeof TestTestRoute
  '/parent2/': typeof Parent2IndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/parent2'
    | '/test'
    | '/item1'
    | '/item2'
    | '/parent1/children'
    | '/parent2/children1'
    | '/parent2/children2'
    | '/test/test'
    | '/parent2/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/test'
    | '/item1'
    | '/item2'
    | '/parent1/children'
    | '/parent2/children1'
    | '/parent2/children2'
    | '/test/test'
    | '/parent2'
  id:
    | '__root__'
    | '/'
    | '/parent2'
    | '/test'
    | '/_group/item1'
    | '/_group/item2'
    | '/parent1/children'
    | '/parent2/children1'
    | '/parent2/children2'
    | '/test/test'
    | '/parent2/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Parent2RouteRoute: typeof Parent2RouteRouteWithChildren
  TestRoute: typeof TestRouteWithChildren
  GroupItem1Route: typeof GroupItem1Route
  GroupItem2Route: typeof GroupItem2Route
  Parent1ChildrenRoute: typeof Parent1ChildrenRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Parent2RouteRoute: Parent2RouteRouteWithChildren,
  TestRoute: TestRouteWithChildren,
  GroupItem1Route: GroupItem1Route,
  GroupItem2Route: GroupItem2Route,
  Parent1ChildrenRoute: Parent1ChildrenRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/parent2",
        "/test",
        "/_group/item1",
        "/_group/item2",
        "/parent1/children"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/parent2": {
      "filePath": "parent2/route.tsx",
      "children": [
        "/parent2/children1",
        "/parent2/children2",
        "/parent2/"
      ]
    },
    "/test": {
      "filePath": "test.tsx",
      "children": [
        "/test/test"
      ]
    },
    "/_group/item1": {
      "filePath": "_group.item1.tsx"
    },
    "/_group/item2": {
      "filePath": "_group.item2.tsx"
    },
    "/parent1/children": {
      "filePath": "parent1/children.tsx"
    },
    "/parent2/children1": {
      "filePath": "parent2/children1.tsx",
      "parent": "/parent2"
    },
    "/parent2/children2": {
      "filePath": "parent2/children2.tsx",
      "parent": "/parent2"
    },
    "/test/test": {
      "filePath": "test.test.tsx",
      "parent": "/test"
    },
    "/parent2/": {
      "filePath": "parent2/index.tsx",
      "parent": "/parent2"
    }
  }
}
ROUTE_MANIFEST_END */
